{
  "version": 3,
  "sources": ["../src/index.ts", "../src/utils/element.ts", "../src/utils/singleton.ts", "../src/utils/validator.ts"],
  "sourcesContent": ["import { ConfType, ValidatorHandlerType } from \"./types\";\nimport Query from \"./utils/element\";\nimport singleton from \"./utils/singleton\";\nimport Validator, { ValidatorResult } from \"./utils/validator\";\n\n\n\n\nexport default class FormValidator {\n\tvalidator: Validator;\n\t_form: HTMLFormElement;\n\tparentClass:ConfType['parentClass'];\n\terrorTextParent:ConfType['errorTextParent'];\n\terrorTextTag:ConfType['errorTextTag'];\n\terrorTextClass:ConfType['errorTextClass'];\n\terrorClass:ConfType['errorClass'];\n\tsuccessClass:ConfType['successClass'];\n\tcontrolClass:ConfType['controlClass'];\n\ttimer: number;\n\twatcher: Function;\n\tconstructor(opts:ConfType){\n\t\tthis.validator = new Validator();\n\t\tthis.parentClass = opts.parentClass;\n\t\tthis.errorTextParent = opts.errorTextParent;\n\t\tthis.errorTextTag = opts.errorTextTag;\n\t\tthis.errorTextClass = opts.errorTextClass;\n\t\tthis.errorClass = opts.errorClass;\n\t\tthis.successClass = opts.successClass;\n\t\tthis.controlClass = opts.controlClass;\n\t}\n\taddRule(name:string, handler:ValidatorHandlerType, error:string){\n\t\tthis.validator.add(name, handler, error);\n\t}\n\tsetForm(form){\n\t\tthis._form = form;\n\t}\n\tsetWatcher(callback){\n\t\tthis.watcher = callback.bind(this);\n\t}\n\tisLoading() {\n\t\t// console.log('validating');\n\t}\n\tdoneLoading() {\n\t\t// console.log('validated');\n\t}\n\taddSuccessClass(target) {\n\t\tif (target.classList.contains(this.errorClass)) {\n\t\t\ttarget.classList.replace(this.errorClass, this.successClass);\n\t\t} else if (!target.classList.contains(this.successClass)) {\n\t\t\ttarget.classList.add(this.successClass);\n\t\t}\n\t}\n\taddErrorClass(target) {\n\t\tif (target.classList.contains(this.successClass)) {\n\t\t\ttarget.classList.replace(this.successClass, this.errorClass);\n\t\t} else if (!target.classList.contains(this.errorClass)) {\n\t\t\ttarget.classList.add(this.errorClass);\n\t\t}\n\t}\n\tremoveErrorClass(target) {\n\t\tconst group = target.closest(`.${this.parentClass}`);\n\n\t\tif (group) {\n\t\t\tconst errorTagIdentity = this.errorTextClass;\n\n\t\t\tconst connectedErrorTextParent = group.querySelector(`.${errorTagIdentity}`);\n\t\t\tif (connectedErrorTextParent) {\n\t\t\t\tconnectedErrorTextParent.remove();\n\t\t\t}\n\t\t}\n\n\n\t\tif (target.classList.contains(this.errorClass)) {\n\t\t\ttarget.classList.remove(this.errorClass);\n\t\t}\n\t}\n\tshowError(target, validated) {\n\t\tlet hasError = false;\n\t\tconst messages = validated.reduce((accu, item) => {\n\t\t\tlet { test, message } = item;\n\t\t\tif (!test) {\n\t\t\t\thasError = true;\n\t\t\t\taccu += `${message} <br>`;\n\t\t\t}\n\n\t\t\treturn accu;\n\t\t}, '');\n\t\tlet parentClass = `.${this.parentClass}`;\n\n\t\tlet parent = target.closest(parentClass);\n\t\tif (!parent) {\n\t\t\tthrow new Error('parent is not found');\n\t\t}\n\n\t\tconst errorTagIdentity = this.errorTextClass;\n\t\tconst connectedErrorTextParent = parent.querySelector(`.${errorTagIdentity}`);\n\t\tif (connectedErrorTextParent) {\n\t\t\tconnectedErrorTextParent.remove();\n\t\t}\n\n\t\tif (hasError) {\n\t\t\tlet tag = document.createElement(this.errorTextTag);\n\t\t\ttag.classList.add(errorTagIdentity);\n\t\t\ttag.innerHTML = messages;\n\t\t\tparent.appendChild(tag);\n\t\t}\n\t}\n\ttimelapse(callback) {\n\t\tif (this.timer) {\n\t\t  clearTimeout(this.timer);\n\t\t}\n\t\tthis.timer = setTimeout(() => {\n\t\t  callback();\n\t\t}, 500);\n\t}\n\tasync validate(selector, isNotify=true){\n\t\tif(!this._form) throw new Error(\"form is not found\");\n\n\t\tconst controls = Query.all(this._form, selector || this.controlClass);\n\t\tconst validated = controls.map(control => {\n\t\t\treturn this.singleValidate(control, isNotify);\n\t\t});\n\n\n\t\tconst allTest = (await Promise.all(validated)).every(item => item);\n\n\t\tif(this.watcher){\n\t\t\tthis.watcher(allTest);\n\t\t}\n\n\t\treturn allTest;\n\n\t}\n\t_defaultValidateResult(data:any){\n\t\treturn [new ValidatorResult('default', true, '', {name:data?.name, value:data?.value})];\n\t}\n\tasync singleValidate(target: HTMLFormElement, isNotify:boolean){\n\t\tconst d = {name:target.name, value:target.value};\n\t\tconst constraints = target.getAttribute('data-validator') || target.dataset.validator;\n\n\t\tlet validation:ValidatorResult[] = null as any;\n\t\tif(!constraints){\n\t\t\tvalidation = this._defaultValidateResult(d);\n\t\t} else {\n\t\t\tvalidation = this.validator.many(this._parse(constraints).map(item=>item.key), d);\n\t\t}\n\t\tconst hasError = validation.some(item => !item.test);\n\t\tif(isNotify){\n\t\t\tif(hasError){\n\t\t\t\tthis.addErrorClass(target);\n\t\t\t} else {\n\t\t\t\tthis.addSuccessClass(target);\n\t\t\t}\n\t\t\tthis.showError(target, validation);\n\t\t}\n\t\treturn !hasError;\n\t}\n\n\t_inputHandler(e){\n\t\tif (e.target.dataset.noValidate) return console.log(\"noValidate is set to true\");\n\t\tthis.singleValidate(e.target, true);\n\t\tthis.validate(null,false);\n\t}\n\t_inputCustomHandler(e){\n\t\tconst target = e.detail.target;\n\t\tif (!target) return console.log(\"target is required for custom event x-input\");\n\t\tif (target.dataset.noValidate) return console.log(\"noValidate is set to true\");\n\t\tthis.singleValidate(target, true);\n\t\tthis.validate(null,false);\n\t}\n\t_addEvent(target) {\n\n\t\t//store the handler to the window object\n\t\tsingleton(\"_inputHandler\",this._inputHandler.bind(this))\n\t\tsingleton(\"_inputCustomHandler\",this._inputCustomHandler.bind(this))\n\n\n\t\ttarget.addEventListener(\"input\",singleton(\"_inputHandler\"));\n\t\ttarget.addEventListener(\"x-input\", singleton(\"_inputCustomHandler\"));\n\t}\n\tstart(isInitialize){\n\t\tif(isInitialize == true){\n\t\t\tthis.validate(null,true);\n\t\t}\n\t\tthis._addEvent(this._form);\n\t}\n\tstop(){\n\t\tthis._form.removeEventListener(\"input\",singleton(\"_inputHandler\"));\n\t\tthis._form.removeEventListener(\"x-input\", singleton(\"_inputCustomHandler\"));\n\t}\n\n\t/**\n     * Parses a validation string and returns an array of validation rules.\n     * \n     * @param str - The validation string to parse, formatted as key=value pairs separated by commas.\n     *              Example: \"required=true, min=3, max=10\"\n     * @returns An array of objects, each containing a `key` and a `value` property.\n     *          If the value is a boolean string (\"true\" or \"false\"), it will be converted to a boolean.\n     *          If the value contains multiple comma-separated values, it will be converted to an array.\n     *          Otherwise, the value will be trimmed and returned as a string.\n     */\n\t_parse(str){\n\t\treturn str.split(',').reduce((accu, iter) => {\n\t\t\tlet [key, value] = iter.split('=');\n\t\n\t\t\tvalue = value ? value.trim() : true;\n\t\t\tif (value == 'true') {\n\t\t\t\tvalue = true;\n\t\t\t} else if (value == 'false') {\n\t\t\t\tvalue = false;\n\t\t\t}\n\n\t\t\taccu.push({ key: key.trim(), value:value });\n\t\t\treturn accu;\n\t\t}, [])\n\t}\n}\n\nexport {Validator}", "\n\nexport default class Query{\n    static all(element, selector):HTMLFormElement[] {\n        return Array.from(element.querySelectorAll(selector));\n    }\n\n}", "export default function singleton<T>(key, value?){\n    if(!window[key]){\n        window[key] = value;\n    }\n    return window[key] as T;    \n}", "import { HandlerArgsType, ValidatorHandlerType } from \"../types\";\n\n/**\n * A utility class for validating strings based on specified rules.\n */\n\n\n\nexport class ValidatorResult {\n    name:string;\n    test:boolean;\n    message:string | undefined;\n    control:any;\n    constructor(name:string, test:boolean, message:string | undefined, control:any){\n        this.name = name;\n        this.test = test;\n        this.message = message;\n        this.control = control;\n    }\n}\n\nexport default class Validator {\n    _validators:Map<string, { handler:ValidatorHandlerType, error:string }>;\n    constructor(){\n        this._validators = new Map;\n    }\n\n    add(name:string, handler:ValidatorHandlerType, error:string){\n        this._validators.set(name, { handler, error });\n    }\n\n    one(name:string, obj:HandlerArgsType): ValidatorResult{\n        const conf = this._validators.get(name);\n        let test = false;\n        if(conf?.handler){\n            test = conf.handler(obj);\n        }\n\n        return new ValidatorResult(name, test, conf?.error, {\n            name:obj?.name,\n            value:obj?.value,\n        });\n    }\n\n    all(obj:HandlerArgsType){\n        return Array.from(this._validators.keys()).map(name => {\n            return this.one(name, obj);\n        });\n    }\n\n    many(names:string[], obj:HandlerArgsType):ValidatorResult[]{\n        return names.map(name => {\n            return this.one(name, obj);\n        });\n    }\n}"],
  "mappings": "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",
  "names": []
}
